{
  "version": 3,
  "sources": ["../src/main.ts", "../src/db/db.ts", "../src/server.ts", "../src/modules/user/user.model.ts", "../src/modules/user/user.service.ts", "../src/modules/user/user.controller.ts", "../src/modules/user/user.route.ts", "../src/modules/note/note.controller.ts", "../src/modules/note/note.model.ts", "../src/modules/note/note.service.ts", "../src/modules/note/note.route.ts"],
  "sourcesContent": ["import 'dotenv/config';\r\nimport { connectDB } from './db/db';\r\nimport buildServer from './server';\r\n\r\nconst fastify = buildServer();\r\n\r\n// Run server\r\nfastify.listen({ port: 3100 }, function (err, address) {\r\n  if (err) {\r\n    fastify.log.error(err);\r\n    process.exit(1);\r\n  }\r\n\r\n  // Connect to Database\r\n  connectDB();\r\n\r\n  fastify.log.info(`Server is now listening on ${address}`);\r\n});\r\n", "import mongoose from 'mongoose';\r\nimport fastify from 'fastify';\r\n\r\nexport async function connectDB() {\r\n  try {\r\n    await mongoose.connect(process.env.MONGO_URI!);\r\n    fastify().log.info('Connected to database');\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error connecting to Database');\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nexport async function disconnectDB() {\r\n  return mongoose.connection.close();\r\n}\r\n", "import 'dotenv/config';\r\nimport Fastify, { FastifyRequest, FastifyReply } from 'fastify';\r\nimport userRoutes from './modules/user/user.route';\r\nimport fastifyJwt, { JWT } from '@fastify/jwt';\r\nimport noteRoutes from './modules/note/note.route';\r\n\r\ndeclare module 'fastify' {\r\n  interface FastifyRequest {\r\n    jwt: JWT;\r\n  }\r\n  export interface FastifyInstance {\r\n    authenticate: any;\r\n    jwt: JWT;\r\n    config: {\r\n      MONGO_URI: string;\r\n      PORT: number;\r\n      JWT_SECRET: string;\r\n    };\r\n  }\r\n}\r\n\r\ndeclare module '@fastify/jwt' {\r\n  interface FastifyJWT {\r\n    user: {\r\n      _id: string;\r\n      name: string;\r\n      email: string;\r\n    };\r\n  }\r\n}\r\n\r\nexport default function buildServer() {\r\n  const fastify = Fastify({\r\n    logger: {\r\n      level: 'info',\r\n      transport: {\r\n        target: 'pino-pretty',\r\n      },\r\n    },\r\n  });\r\n\r\n  fastify.register(fastifyJwt, {\r\n    secret: process.env.JWT_SECRET!,\r\n  });\r\n\r\n  fastify.decorate(\r\n    'authenticate',\r\n    async (request: FastifyRequest, reply: FastifyReply) => {\r\n      try {\r\n        await request.jwtVerify();\r\n      } catch (error) {\r\n        return reply.send(error);\r\n      }\r\n    }\r\n  );\r\n\r\n  fastify.addHook('preHandler', (req, reply, next) => {\r\n    req.jwt = fastify.jwt;\r\n    return next();\r\n  });\r\n\r\n  fastify.get('/', async (request: FastifyRequest, reply: FastifyReply) => {\r\n    reply.send({ status: 'OK', port: '3100' });\r\n  });\r\n\r\n  fastify.register(userRoutes, { prefix: 'api/users' });\r\n  fastify.register(noteRoutes, { prefix: 'api/notes' });\r\n\r\n  return fastify;\r\n}\r\n", "import mongoose from 'mongoose';\r\nimport * as bcrypt from 'bcrypt';\r\n// Define a Mongoose schema\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// Hash password before saving to DB\r\nuserSchema.pre('save', async function (next) {\r\n  if (this.isModified('password') || this.isNew) {\r\n    const saltRounds = 13;\r\n    this.password = await bcrypt.hash(this.password, saltRounds);\r\n    return next();\r\n  }\r\n});\r\n\r\n// Create a Mongoose model\r\nexport const UserModel = mongoose.model('User', userSchema);\r\n", "import { CreateUserDto } from './dtos/user.dtos';\r\nimport { UserModel } from './user.model';\r\n\r\nexport async function createUser(data: CreateUserDto) {\r\n  return UserModel.create(data);\r\n}\r\n\r\nexport async function findUserByEmail(email: string) {\r\n  return UserModel.findOne({ email });\r\n}\r\n", "import { FastifyRequest, FastifyReply } from 'fastify';\r\nimport { createUser, findUserByEmail } from './user.service';\r\nimport { LoginUserDto } from './dtos/user.dtos';\r\nimport { compareSync } from 'bcrypt';\r\nimport fastify from 'fastify';\r\n\r\nexport async function registerHandler(\r\n  request: FastifyRequest<{\r\n    Body: Parameters<typeof createUser>[number];\r\n  }>,\r\n  reply: FastifyReply\r\n) {\r\n  try {\r\n    const data = request.body;\r\n    const { _id, name, email } = await createUser(data);\r\n\r\n    const payload = {\r\n      _id,\r\n      name,\r\n      email,\r\n    };\r\n\r\n    reply.code(201).send({\r\n      message: 'Registration Successful',\r\n      accessToken: request.jwt.sign(payload),\r\n    });\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error Registering User');\r\n    return reply.code(500).send(error);\r\n  }\r\n}\r\n\r\nexport async function loginHandler(\r\n  request: FastifyRequest<{\r\n    Body: LoginUserDto;\r\n  }>,\r\n  reply: FastifyReply\r\n) {\r\n  try {\r\n    const { email, password } = request.body;\r\n\r\n    const user = await findUserByEmail(email);\r\n\r\n    if (!user) {\r\n      return reply.status(401).send({\r\n        message: 'Invalid Credentials',\r\n      });\r\n    }\r\n\r\n    if (!compareSync(password, user.password)) {\r\n      return reply.status(401).send({\r\n        message: 'Invalid Credentials',\r\n      });\r\n    }\r\n\r\n    const { _id, name } = user;\r\n\r\n    const payload = {\r\n      _id,\r\n      email,\r\n      name,\r\n    };\r\n\r\n    return { accessToken: request.jwt.sign(payload) };\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error Login');\r\n    return reply.code(500).send(error);\r\n  }\r\n}\r\n", "import { FastifyInstance } from 'fastify';\r\nimport { loginHandler, registerHandler } from './user.controller';\r\n\r\nasync function userRoutes(fastify: FastifyInstance) {\r\n  fastify.post('/register', registerHandler);\r\n\r\n  fastify.post('/login', loginHandler);\r\n}\r\n\r\nexport default userRoutes;\r\n", "import fastify, { FastifyRequest, FastifyReply } from 'fastify';\r\nimport {\r\n  createNote,\r\n  deleteNote,\r\n  getAllNotes,\r\n  getNoteById,\r\n  updateNote,\r\n} from './note.service';\r\n\r\nexport async function createNoteHandler(\r\n  request: FastifyRequest<{\r\n    Body: Parameters<typeof createNote>[number];\r\n  }>,\r\n  reply: FastifyReply\r\n) {\r\n  try {\r\n    const { title, content } = request.body;\r\n    const userId = request.user._id;\r\n    const note = await createNote({ title, content, user: userId });\r\n    reply.code(201).send(note);\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error Creating Note');\r\n    return reply.code(500).send(error);\r\n  }\r\n}\r\n\r\nexport async function getNotesHandler(\r\n  request: FastifyRequest,\r\n  reply: FastifyReply\r\n) {\r\n  try {\r\n    // Loggedin User's ID\r\n    const userId = request.user._id;\r\n\r\n    return getAllNotes(userId);\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error Fetching Notes');\r\n    return reply.code(500).send(error);\r\n  }\r\n}\r\n\r\nexport async function updateNoteHandler(\r\n  request: FastifyRequest<{\r\n    Body: Parameters<typeof createNote>[number];\r\n    Params: { id: string };\r\n  }>,\r\n  reply: FastifyReply\r\n) {\r\n  try {\r\n    const { id } = request.params;\r\n    const { title, content } = request.body;\r\n    const userId = request.user._id;\r\n\r\n    if (!(await getNoteById(id))) {\r\n      return reply.code(404).send({ message: 'Note not found' });\r\n    }\r\n\r\n    const note = await updateNote(id, { title, content, user: userId });\r\n\r\n    reply.code(200).send(note);\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error Updating Note');\r\n    return reply.code(500).send(error);\r\n  }\r\n}\r\n\r\nexport async function deleteNoteHandler(\r\n  request: FastifyRequest<{\r\n    Params: { id: string };\r\n  }>,\r\n  reply: FastifyReply\r\n) {\r\n  try {\r\n    const { id } = request.params;\r\n\r\n    if (!(await getNoteById(id))) {\r\n      return reply.code(404).send({ message: 'Note not found' });\r\n    }\r\n\r\n    await deleteNote(id);\r\n\r\n    reply.code(200).send({ message: 'Note Deleted Successfully' });\r\n  } catch (error) {\r\n    fastify().log.error(error, 'Error Deleting Note');\r\n    return reply.code(500).send(error);\r\n  }\r\n}\r\n", "import mongoose from 'mongoose';\r\n\r\n// Define a Mongoose schema\r\nconst noteSchema = new mongoose.Schema(\r\n  {\r\n    user: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'User', // Replace 'User' with the name of your User model\r\n      required: true,\r\n    },\r\n    title: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    content: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// Create a Mongoose model\r\nexport const NoteModel = mongoose.model('Note', noteSchema);\r\n", "import { CreateNoteDto } from './dtos/note.dtos';\r\nimport { NoteModel } from './note.model';\r\n\r\nexport function createNote(data: CreateNoteDto) {\r\n  return NoteModel.create(data);\r\n}\r\n\r\nexport function getAllNotes(userId: string) {\r\n  return NoteModel.find({ user: userId }).populate('user', '_id email name');\r\n}\r\n\r\nexport function updateNote(noteId: string, data: CreateNoteDto) {\r\n  return NoteModel.findByIdAndUpdate(noteId, data, { new: true });\r\n}\r\n\r\nexport function getNoteById(noteId: string) {\r\n  return NoteModel.findById(noteId);\r\n}\r\n\r\nexport function deleteNote(noteId: string) {\r\n  return NoteModel.findByIdAndDelete(noteId);\r\n}\r\n", "import { FastifyInstance } from 'fastify';\r\nimport {\r\n  createNoteHandler,\r\n  deleteNoteHandler,\r\n  getNotesHandler,\r\n  updateNoteHandler,\r\n} from './note.controller';\r\n\r\nasync function noteRoutes(fastify: FastifyInstance) {\r\n  fastify.post(\r\n    '/add',\r\n    {\r\n      onRequest: [fastify.authenticate],\r\n    },\r\n    createNoteHandler\r\n  );\r\n\r\n  fastify.get(\r\n    '/all',\r\n    {\r\n      onRequest: [fastify.authenticate],\r\n    },\r\n    getNotesHandler\r\n  );\r\n\r\n  fastify.put(\r\n    '/update/:id',\r\n    {\r\n      onRequest: [fastify.authenticate],\r\n    },\r\n    updateNoteHandler\r\n  );\r\n\r\n  fastify.delete(\r\n    '/delete/:id',\r\n    {\r\n      onRequest: [fastify.authenticate],\r\n    },\r\n    deleteNoteHandler\r\n  );\r\n}\r\n\r\nexport default noteRoutes;\r\n"],
  "mappings": "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",
  "names": ["import_config", "import_mongoose", "import_fastify", "connectDB", "mongoose", "fastify", "error", "import_config", "import_fastify", "import_mongoose", "bcrypt", "userSchema", "mongoose", "next", "UserModel", "createUser", "data", "UserModel", "findUserByEmail", "email", "import_bcrypt", "import_fastify", "registerHandler", "request", "reply", "data", "_id", "name", "email", "createUser", "payload", "error", "fastify", "loginHandler", "password", "user", "findUserByEmail", "userRoutes", "fastify", "registerHandler", "loginHandler", "user_route_default", "import_jwt", "import_fastify", "import_mongoose", "noteSchema", "mongoose", "NoteModel", "createNote", "data", "NoteModel", "getAllNotes", "userId", "updateNote", "noteId", "getNoteById", "deleteNote", "createNoteHandler", "request", "reply", "title", "content", "userId", "note", "createNote", "error", "fastify", "getNotesHandler", "getAllNotes", "updateNoteHandler", "id", "getNoteById", "updateNote", "deleteNoteHandler", "deleteNote", "noteRoutes", "fastify", "createNoteHandler", "getNotesHandler", "updateNoteHandler", "deleteNoteHandler", "note_route_default", "buildServer", "fastify", "Fastify", "fastifyJwt", "request", "reply", "error", "req", "next", "user_route_default", "note_route_default", "fastify", "buildServer", "err", "address", "connectDB"]
}
